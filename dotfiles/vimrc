set columns=160
set exrc              " Enable .vimrc .gvimrc
set nocompatible      " We're running Vim, not Vi!
set cmdheight=2
set fen               " Folding enabled
set fdm=syntax        " Fold mode to syntax
set fdc=3             " 3 fold columns
set foldtext=getline(v:foldstart)
set wrap		
set history=1000      " Size of the history
set backspace=indent,eol,start
set autoread
set nojoinspaces
set magic             " Use some magic in search patterns?  Certainly!
set ruler
set showcmd                     " Show current uncompleted command?  Absolutely!
set showmatch                   " Show the matching bracket for the last ')'?
set showmode                    " Show the current mode?  YEEEEEEEEESSSSSSSSSSS!
set hlsearch
set autoindent
set shiftwidth=2
set tabstop=2
set expandtab
set textwidth=80
set wildmenu
set ls=2
set nohlsearch
set directory=/tmp
set encoding=utf-8
set wildmode=list:longest
set ignorecase 
set smartcase
set incsearch                   " Incremental search
set hlsearch                    " hilight search
set scrolloff=6
set shortmess=atI
set laststatus=2
set statusline=@%{GitBranch()}\ %F%m%r%h%w\ %Y\ %03l,%03v\ %L

syntax on             " Enable syntax highlighting
filetype on           " Enable fieltype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

compiler rubyunit
nmap <Leader>fd :cf /tmp/autotest.txt<cr> :compiler rubyunit<cr>

nnoremap ' `
nnoremap ` '

nmap <F3> :SessionSave<CR>
nmap <F2> :SessionList<CR>

map <TAB> za
imap r <%  %>F%hi
map r i<%  %>F%hi
imap p <%=  %>F%hi
map p i<%=  %>F%hi
imap h <%=h  %>F%hi
map h i<%=h  %>F%hi
imap g _('')F'i
map g i_('')F'i
imap n o 
map n o '
map <D-s> :wa<CR>
imap <D-s> <ESC>:wa<CR>


iab Idate <C-R>=strftime("%d %B %Y, %X")<CR>

vmap \em :call ExtractMethod()<CR>
function! ExtractMethod() range
  let name = inputdialog("Name of new method:")
  '<
  exe "normal! O\<BS>def " . name ."()\<CR>\<Esc>"
  '>
  exe "normal! oreturn \<CR>end\<Esc>k"
  s/return/\/\/ return/ge
  normal! j%
  normal! kf(
  exe "normal! yyPi// = \<Esc>wdwA;\<Esc>"
  normal! ==
  normal! j0w
endfunction

let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'FavFile':{}, 'Tag':{}, 'TaggedFile':{}}
let g:FuzzyFinderOptions.Base.ignore_case = 1
let g:FuzzyFinderOptions.Base.abbrev_map  = {
     \   '\C^VR' : [
     \     '$VIMRUNTIME/**',
     \     '~/.vim/**',
     \     '$VIM/.vim/**',
     \     '$VIM/vimfiles/**',
     \   ],
     \ }
let g:FuzzyFinderOptions.MruFile.max_item = 200
let g:FuzzyFinderOptions.MruCmd.max_item = 200
nnoremap <silent> <C-n>      :FuzzyFinderBuffer<CR>
nnoremap <silent> <C-m>      :FuzzyFinderFile <C-r>=expand('%:~:.')[:-1-len(expand('%:~:.:t'))]<CR><CR>
nnoremap <silent> <C-j>      :FuzzyFinderMruFile<CR>
nnoremap <silent> <C-k>      :FuzzyFinderMruCmd<CR>
nnoremap <silent> <C-p>      :FuzzyFinderDir <C-r>=expand('%:p:~')[:-1-len(expand('%:p:~:t'))]<CR><CR>
nnoremap <silent> <C-f><C-d> :FuzzyFinderDir<CR>
nnoremap <silent> <C-f><C-f> :FuzzyFinderFavFile<CR>
nnoremap <silent> <C-f><C-t> :FuzzyFinderTag!<CR>
nnoremap <silent> <C-f><C-g> :FuzzyFinderTaggedFile<CR>
noremap  <silent> g]         :FuzzyFinderTag! <C-r>=expand('<cword>')<CR><CR>
nnoremap <silent> <C-f>F     :FuzzyFinderAddFavFile<CR>
nnoremap <silent> <C-f><C-e> :FuzzyFinderEditInfo<CR>


" THE BEER-WARE LICENSE" (Revision 42):
" <pepe@gravastar.cz> wrote this file. As long as you retain this notice you
" can do whatever you want with this stuff. If we meet some day, and you think
" this stuff is worth it, you can buy me a beer in return. 
" Josef 'pepe' Pospisil
